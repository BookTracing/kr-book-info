/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  default: () => KrBookInfo
});
var import_obsidian2 = __toModule(require("obsidian"));

// src/crawler.ts
var import_obsidian = __toModule(require("obsidian"));
var searchBookUrl = (keyword) => __async(void 0, null, function* () {
  keyword = encodeURI(keyword);
  try {
    const response = yield (0, import_obsidian.requestUrl)({
      url: "http://www.yes24.com/Product/Search?domain=BOOK&query=" + keyword
    });
    const parser = new DOMParser();
    const html = parser.parseFromString(response.text, "text/html");
    const bookUrl = html.querySelector("#yesSchList > li:nth-child(1) > div > div.item_info > div.info_row.info_name > a.gd_name").getAttribute("href");
    return bookUrl;
  } catch (err) {
    console.log(err);
    return "";
  }
});
var totalSearchBookUrl = (keyword) => __async(void 0, null, function* () {
  keyword = encodeURI(keyword);
  try {
    const response = yield (0, import_obsidian.requestUrl)({
      url: "http://www.yes24.com/Product/Search?domain=ALL&query=" + keyword
    });
    const parser = new DOMParser();
    const html = parser.parseFromString(response.text, "text/html");
    const bookUrl = html.querySelector("#yesSchList > li:nth-child(1) > div > div.item_info > div.info_row.info_name > a.gd_name").getAttribute("href");
    return bookUrl;
  } catch (err) {
    console.log(err);
    return "";
  }
});
var getBookUrl = (keyword) => __async(void 0, null, function* () {
  let bookUrl = yield searchBookUrl(keyword);
  if (!bookUrl)
    bookUrl = yield totalSearchBookUrl(keyword);
  return bookUrl;
});
var getBookInfoResult = (bookUrl) => __async(void 0, null, function* () {
  bookUrl = encodeURI(bookUrl);
  try {
    const response = yield (0, import_obsidian.requestUrl)({
      url: `http://www.yes24.com` + bookUrl
    });
    const parser = new DOMParser();
    const html = parser.parseFromString(response.text, "text/html");
    const tags = [];
    html.querySelectorAll("#infoset_goodsCate > div.infoSetCont_wrap > dl:nth-child(1) > dd > ul > li > a").forEach((value) => {
      tags.push(value.getText().replace(/(\s*)/g, ""));
    });
    const tag = [...new Set(tags)];
    let title = html.querySelector("#yDetailTopWrap > div.topColRgt > div.gd_infoTop > div > h2").getText().replace(/\(.*\)/gi, "").replace(/\[.*\]/gi, "").replace(":", "\uFF1A").replace("?", "\uFF1F").trim();
    let subTitle = html.querySelector("#yDetailTopWrap > div.topColRgt > div.gd_infoTop > div > h3");
    if (subTitle) {
      title = title + "\uFF1A" + subTitle.getText().replace(":", "\uFF1A").replace("?", "\uFF1F").trim();
    }
    const author = [];
    html.querySelectorAll("#yDetailTopWrap > div.topColRgt > div.gd_infoTop > span.gd_pubArea > span.gd_auth").forEach((value) => {
      author.push(value.getText().trim());
    });
    let page = +html.querySelector("#infoset_specific > div.infoSetCont_wrap > div > table > tbody > tr:nth-child(2) > td").getText().split(" ")[0].slice(0, -1);
    if (isNaN(page))
      page = 0;
    const publishDate = html.querySelector("#yDetailTopWrap > div.topColRgt > div.gd_infoTop > span.gd_pubArea > span.gd_date").getText().split(" ").map((v) => v.slice(0, -1)).join("-");
    const coverUrl = html.querySelector("#yDetailTopWrap > div.topColLft > div > span > em > img").getAttribute("src");
    const frontmatter = {
      created: `${new Date(+new Date() + 3240 * 1e4).toISOString().split("T")[0] + " " + new Date().toTimeString().split(" ")[0].slice(0, 5)}`,
      tag: `\u{1F4DA}\uB3C5\uC11C ${tag.join(" ")}`,
      title: `${title}`,
      author: `${author.join(", ")}`,
      category: `${tag[1]}`,
      total_page: page,
      publish_date: `${publishDate}`,
      cover_url: `${coverUrl}`,
      status: `\u{1F7E9} \uC644\uB8CC`,
      start_read_date: `${new Date(+new Date() + 3240 * 1e4).toISOString().split("T")[0]}`,
      finish_read_date: `${new Date(+new Date() + 3240 * 1e4).toISOString().split("T")[0]}`,
      my_rate: 0,
      book_note: `\u274C`
    };
    const result = `---
${(0, import_obsidian.stringifyYaml)(frontmatter)}---

# ${title}`;
    return [
      title.replace("\uFF1A", " ").replace("\uFF1F", "").replace("/", "\uFF0F").replace(/\s{2,}/gi, " "),
      result
    ];
  } catch (err) {
    console.log(err);
    return ["", ""];
  }
});
var getBook = (keyword) => __async(void 0, null, function* () {
  const bookUrl = yield getBookUrl(keyword);
  if (!bookUrl) {
    return [keyword, `${keyword} No title found`];
  }
  const [title, result] = yield getBookInfoResult(bookUrl);
  if (!result) {
    return [keyword, `${keyword} No title found`];
  }
  return [title, result];
});

// main.ts
var KrBookInfo = class extends import_obsidian2.Plugin {
  onload() {
    return __async(this, null, function* () {
      this.addRibbonIcon("lines-of-text", "Add Book Info", (evt) => __async(this, null, function* () {
        const file = this.app.workspace.getActiveFile();
        if (!file) {
          new import_obsidian2.Notice("There's no active file, Please open new file");
          return;
        }
        new import_obsidian2.Notice("Loading...");
        const [title, result] = yield getBook(file.basename);
        const text = yield this.app.vault.read(file);
        this.app.vault.modify(file, result + "\n\n" + text);
        const regExp = /[\{\}\[\]\/?.,;:|\)*~`!^\-+<>@\#$%&\\\=\(\'\"]/gi;
        const fileName = title.replace(regExp, "");
        this.app.fileManager.renameFile(this.app.vault.getAbstractFileByPath(file.path), file.parent.path + "/" + fileName + ".md");
        new import_obsidian2.Notice("Success!");
        return;
      }));
    });
  }
  onunload() {
  }
};
//# sourceMappingURL=data:application/json;base64,
